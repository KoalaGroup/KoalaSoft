* Geometry 
** List of Geometries (with Tagging Name)
   |--------------------------+------------------------------------+--------------------------------+-----------+--------+-----------------------------------------------------------------------------------------------------------|
   | Tagging Name             | Recoil                             | Fwd                            | Pipe      | Cave   | Description                                                                                               |
   |--------------------------+------------------------------------+--------------------------------+-----------+--------+-----------------------------------------------------------------------------------------------------------|
   | Simplified               | rec.root                           | fwd.root                       | NULL      | Vacuum | The most simplified configuration, only 4 recoil sensors and 2 fwd sensors in place; no pipe, no chambers |
   | Full                     | rec_withChamber_withColdPlate.root | fwd_withChamber_withExtra.root | pipe.root | Vacuum | The full configuration                                                                                    |
   | Simplified_withColdPlate | rec_withColdPlate.root             | fwd_withExtra.root             | NULL      | Vacuum | Same as Simplified, add the cold plate of recoil detector and the extra scints of fwd detector            |

** Parameters
*** Default setup(passive modules)
    Cave: read from cave.geo file, type: box, material: vacuum, size: 200m*200m*200m, related class: KoaCave and KoaGeoCave

*** Intial edition (from the design schematics)
**** Recoil detector
***** List of ROOT geometry files
      - rec.root : most simplified version, only recoil sensors in vacuum
      - rec_withChamber.root : recoil sensors inside chamber
      - rec_withChamber_withColdPlate.root: full version, sensors , coldpalte behind the sensors, and the chamber
      - rec_withColdPlate.root: sensors and coldpalte in vacuum
    
***** Geometry design guideline 

****** Topology
      - TOP/Cave/World (cave_1)
        - RecArm (RecArm_0)
          - RecArm_Chamber (RecArm_Chamber_1)
          - RecArm_Vacuum  (RecArm_Vacuum_1)
            - RecArm_Detectors (RecArm_Detectors_1)
              - SensorSi1 (SensorSi1_1)
              - SensorSi2 (SensorSi2_1)
              - SensorGe1 (SensorGe1_1)
              - SensorGe2 (SensorGe2_1)
              - ColdPlate (ColdPlate_1)
              
****** Structure of the components
       Both /RecArm_Chamber/ and /RecArm_Vacuum/ are polycone shape.
       The Chamber consists of two section: the main section where the sensors are located 
       and an adapter section which is connected to the flange of the target chamber in reality. 
       The adapter section has smaller diameter than the main section.
       It's simplified and shortened that it does not touch the target chamber is simulation.
       This is to facilitate the alignment of the whole chamber towards the interaction point in simulation,
       so that no overlap exist.

       The dimension and position in the ROOT file is:[TODO] <2019-10-23 Mi> drawing from inkscape

       *NOTE* A /10 cm/ unclosed section is left between the recoil chamber and the target chamber.
       It is used for alignment of the whole recoil chamber without causing overlap.

**** Forward detector

***** DONE COMMENT List of ROOT geometry files
      CLOSED: [2019-10-24 Do 14:35]
      - fwd.root : most simplified version, only two scintillator detectors in vacuum
      - fwd_withExtra.root : all 8 scint detectors in vacuum
      - fwd_withChamber.root : two scint detectors in chamber
      - fwd_withChamber_withExtra.root : full version, 8 scints in chamber

***** Geometry design guideline 

****** Topology
       - Top/World/Cave (cave_1)
         - FwdArm (FwdArm_0)
           - FwdArm_Chamber (FwdArm_Chamber_1)
           - FwdArm_Vacuum (FwdArm_Vacuum_1)
             - FwdArm_Detectors (FwdArm_Detectors_1)
             - SensorSc1 (SensorSc1_1)
             - SensorSc2 (SensorSc2_1)
             - SensorSc3 (SensorSc3_1)
             - SensorSc4 (SensorSc4_1)
             - SensorSc5 (SensorSc5_1)
             - SensorSc6 (SensorSc6_1)
             - SensorSc7 (SensorSc7_1)
             - SensorSc8 (SensorSc8_1)

****** Structure of the components

**** Pipe and target chamber

***** List of ROOT geometry file
      Both beam pipe and the target chamber are defined in the same root file.
      - pipe.root : beam pipe and target chamber
      
***** Design guidel\
      
****** Topology
       - Top/World/Cave (cave_1)
         - PipeAssembly (PipeAssembly_0)
           - PipeAssembly_TargetChamber (PipeAssembly_TargetChamber_1)
           - PipeAssembly_TargetVacuum (PipeAssembly_TargetVacuum_1)
           - PipeAssembly_PipeChamber (PipeAssembly_PipeChamber_1)
           - PipeAssembly_PipeVacuum (PipeAssembly_PipeVacuum_1)

****** Structure of the components
       
       *NOTE* An unclosed gap between the beam pipe and the forward chamber.
       It is aimed for the alignment of the whole forward chamber without causing overlap.

** TGeo package in ROOT
*** MasterToLocal or LocalToMaster
    The correct way to transform from local coordinate to global coordinate, or vice visa:
    #+BEGIN_SRC C++
    // cd to the node where the local coordinate system located
    geoMan->cd("nodename");
    // transform from global coordinate to local coordinate
    geoMan->MasterToLocal(posGlobal,posLocal);
    // transform from local coordinate to global coordinate
    geoMan->LocalToMaster(posLocal,posGlobal);
    #+END_SRC

    *WARNING:* Don't use TGeoNode's MasterToLocal and LocalToMaster, they will give the transformation between local and the node's 
    mother volume instead of local and global.

*** Node Naming Convention 
    The name of the nodes in the geometry hierarchy follows the patter "NAMEOFVOLUME_ID".
    *NAMEOFVOLUME* is the name of the volume, *ID* is the daughter id of this node which is assigned in *AddNode*.
    
    In FairROOT, the default daughter id for the geometry constructed from text files is 1.
    The default daughter id for the geometry imported from root files is 0 (the highest level volume after top volume).
    For deeper nodes in root file geometry, it depends on the root geometry model, which is decided by user when building the ROOT geometry.
    
    Accessing a specific node is based on the geometry directory tree like '/NameOfTopVolume_ID/NameOfNextVolume_ID/..'.
    Interestingly, the ID suffix of the top volume can be neglected while for other volumes the ID should be included exactly the same.
    This is reasonable, because there is only one top volume (or world volume) in the geometry model.

*** TODO <2019-10-23 Mi> How to get Matrix for coordinates transformation
    The correct way to get a copy of the rotation matrix for a specific node is:
    #+BEGIN_SRC C++
    // cd to the node where the local coordinate system located
    geoMan->cd("nodename");
    // get a copy of the TGeoHMatrix of this node
    rotMatrix = geoMan->GetCurrentMatrix()->MakeClone();
    // MasterToLocal, or LocalToMaster
    rotMatrix->MasterToLocal(posGlobal, posLocal);
    rotMatrix->LocalToMaster(posLocal, posGlobal);
    #+END_SRC
    
**** Matrix in TGeo
     /TGeoMatrix.h/ defines all the geometry transformation classes in TGeo package.
     The classes can be devided int three categories:
     1. TGeoMatrix : the abstract interface class, all other classes inherited from it
     2. TGeoTranslation, TGeoRotation, TGeoCombiTrans, TGeoScale, TGeoGenTrans, TGeoIdentity: 
        specific transformation class which only has the specific data members for this specific transformation
     3. TGeoHMatrix : the class which defines the uniform and generic interface,
        it is used to represent all kinds of transformations, thus can be used for matrix computation 
        and point/vector transformation between different coordinate system.
     
     *WARNING* All specific transformation matrix should be turned into a TGeoHMatrix for point/vector transformation
     
     *COMMENT* Unless explicitly used for positioning nodes (TGeoVolume::AddNode()), all matrixes deletion have to be
     managed by users. Matrices passed to geometry have to be created by using /new/ operator and their deletion is done
     by /TGeoManager/.

**** How to apply misalignment matrix
    Assume 

* Version history
** Before 07.05.2019
*** Recoil Detector
   - si1/si2/ge1/ge2_vertical_offset : 1.35/2 cm
   - si1si2_overlap_offset : 0 cm
   - si2ge1_overlap_offset : 0 cm
   - ge1ge2_overlap_offset : 0 cm
   - ip_offset : 0.12*22 cm
   - ip_distance : 100 cm
   - chamber_center_offset : 5 cm
*** DONE Fwd Detector 
    CLOSED: [2019-10-18 Fr 11:42]
    Shape: TGeoTrd1
    - fwd_x_low : 1/2 cm
    - fwd_x_high: 2/2 cm
    - fwd_y : 0.6/2 cm
    - fwd_z : 9/2 cm
    - Distance to IP : 460/480 cm

** More accurate parameters for beam test 2013/2015
*** Recoil Detector
   - si1/si2/ge1/ge2_vertical_offset : 1.35/2 cm
   - si1si2_overlap_offset : -0.03 cm
   - si2ge1_overlap_offset : -0.035 cm
   - ge1ge2_overlap_offset : 0.02 cm
   - ip_offset : 0.12*22 cm
   - ip_distance : 101.096 cm
   - chamber_center_offset : 5 cm
   
   Verification of the sensor dimenstion and position:
   [[file:rec_dimension_verification.pdf][Hit distribution in the recoil sensors using isotropically distributed particle source]]
    
** TODO <2019-10-18 Fr> Pipe
   - New pipe dimension to host fwd detectors
   - Pipe segmentation
   - Pipe diameter of Fwd section: 20 cm
 
** TODO <2019-10-18 Fr> A modifiable geometry model needed for small changes in simulation

** <2019-10-18 Fr> For simplified geometry, no chamber involved, the Cave material is changed to vacuum from air

* Anatomy of FairRoot framework
** Running environment
*** Common
*** MC Simulation
    MC Simulation is based on ROOT VMC package. VMC aims to provide a common interface to various MC engines.
    Currently, only the interfaces of Geant3 and Geant4 are implemented.
    
**** Key classes in VMC
*****  TVirtualMC
       TVirtualMC is the interface (encapulate all the internals) to a specific MC engine.
       Each MC engine should provide a class inheriting TVirtualMC. Normally, they are provided by the MC engine providers.
       For Geant3/Geant4, they are provided in /geant3/ and /geant4_vmc/ packages respectively, with the class name *TGeant3* and *TGeant4*.
       User do not need to write his own version of *TVirtualMC* inherited class. It is the responsibility of the MC engine developper.
       
       It is a singleton (thread local). And it keeps an reference to gMCApplication.

*****  TVirtualMCApplication
      User-defined interface class to MC engine. It is a mandatory class, i.e. the user (framework developper)  must implement this class
      according to his needs. In FairRoot, this class is *FairMCApplication*. It contains necessary hooks which will be called by MC engine
      in the simulation. In this sense, it acts as an interface to the underlying MC engine. The hooks can be divided into three categories:
      1. Hooks have to be implemented by the user, like /ConstructGeometry/, /InitGeometry/, /GeneratePrimaries/, /BeginEvent/, /BeginPrimary/,
         /PreTrack/, /Stepping/, /PostTrack/, /FinishPrimary/, /FinishEvent/
      2. Hooks with default implementation. Depending on the customization level of user's simulation needs, these hooks can also be overloaded
         by the user, like: /MisalignGeometry/, /ConstructOpGeometry/, /ConstructSensitiveDetectors/, /AddParticles/, /AddIons/, /TrackingRmax/
         /TrackingZmax/ etc.
      3. Hooks related to the multi-thread simulation, like /InitOnWorker/, /BeginRunOnWorker/, /FinishRunOnWorker/, /Merge/.
      
      Before a user can instantiate an MC engine, an object from *TVirtualMCApplication* needs to be present.
****** FairMCApplication
       Interface from application developper to the framework internals.

****** FairRunSim
       Interface to *FairMCApplication*, used by the end user directly. Organize the invoking of the functions in *FairMCApplication* to provide
       the end user a more friedly interface.
       All running configuration interface is implemented in this class.
       End-user can control the simulation through the interface provided by this class.
       
******* List of functions for configuration and steering:
******** Configuration:
         - SetUserConfig --> change member /fUserConfig/, the name of the macro for geant configuration
         - SetUserCuts   --> change member /fUserCuts/, the name of the macro for geant cuts
         - SetUserDecay  --> change member /fUserDecay/, the switch flag of using user decay model or the default pythia decay model;
                             also change member /fUserDecayConfig/ , the name of the macro for decay configuration
         - AddModule     --> change member /ListOfModules/, the list of geometry setup
         - SetField      --> change member /fField/, the magnet field
         - SetGenerator  --> change member /fGen/, the primary generator
         - SetBeamMom    --> change member /fUseBeamMom/ and /fBeamMom/, the flag and the beam energy value
         - SetIsMT       --> change member /fIsMT/, MT mode option (G4 only)
         - SetSimSetup   --> change member /fSimSetup/, A user provided function to do simulation configuration instead of using macro
                             and the flag /fUseSimSetupFunction/

         - SetMaterials
         - SetGeoModel
          
         - AddNewIon
         - AddNewParticle
         - SetPythiaDecayer
         - SetRadLenRegister
         - SetRadMapRegister
         - SetRadGridRegister
         - SetStoreTraj
         - SetTrackingDebugMode
         - AddMesh

******** Steering
         - Init
         - Run
         - StopMCRun

***** TVirtualMCStack 
***** TVirtualMCDecayer
***** TVitrualMCSensitiveDetector

**** Running environment
     *VMCWORKDIR* is the working directory for VMC. The default is the source directory of the application, like /KoalaSoft/.
     The default value is set by the /config.sh/ script under build directory.
     *VMCWORKDIR* should contain a subdirectory called /gconfig/, which contains all the macros which may be used for user
     defined configuration.

**** Workflow
     1. New *FairMCApplication* (through *FairRunSim*)
     2. New *TG3/4RunConfiguration* (through the default /g3/4Config.C/ macro)
     3. New *TGeant3/4* (through the default /g3/4Config.C/ macro)

**** User defined configuration
     Two ways of passing user's configuration: macros or functions
     Macros:
     - g3/4Config.C (Config())
       1. RunConiguration
       2. TGeant3/4
       3. Stack
       
     - SetCuts.C (SetCuts())

     Functions
*** Recontruction & Analysis & Other Tasks
** Stack
*** Class Hierarchy
    KoaStack --> FairGenericStack --> TVirtualMCStack
*** Overview
    MC Stack basically need to provide an interface to pop out track for simulation and also an interface to push back secondaries generated in the simulation for later transportation.
    The most important functions:
    - PushTrack
    - PopNextTrack
    - PopPrimaryForTracking
      
    FairRoot provides FairGenericStack, which further defines interfaces for MCtrack persistence, filtering and fast simulation.
    The most important functions:
    - FillTrackArray :: Fill the MCTrack output array, applying the filter criteria
    - UpdateTrackIndex ::
    - SetDetArrayList ::
    - Register ::
    - CloneStack :: 
    
*** Data Structure of Stack
    How the data structure of Stack is organized is defined by the user himself.
    KoaStack contains :
    - fParticles :: an array of TParticles appeared in the simulation (both primaries and secondaries put into or created by the transport engine).
                    It acts as a record of all the particles in the simulation. The index in this container is the *trackID* (starting from 0).
    - fTracks :: an array of KoaMCTracks, which are formed from a subset of fParticles. KoaMCTrack is a data class representing a track in the simulation.
                 KoaMCTrack is built from a TParticle together with the MCHits Number in each detector. Tracks in the simulation need to pass a filter to
                 be filled into fTracks. fTracks finally can be written to the output file for offline analysis.
    - fStack :: the underlining FILO stack of TParticles, which is used the FILO stack of TParticles. fStack is used to pop out the next track to be simulated.
                For each simulated particle, it will be popped out from fStack but it still exists in fParticles.
    - fDetList :: inherited from FairGenericStack, a list of detectors registering hits in the simulation
    
    Auxiliary data members:
    - fCurrentTrack :: index of current track in fParticles, i.e. the trackID
    - fNPrimaries :: number of primaries
    - fNParticles :: size of fParticles
    - fNTracks ::  size of fTracks
                  
    Data members used for filtering:
    - f
*** Key functions:
    Functions to be implemented by user:
    - PushTrack
    - CloneStack :: used in MT mode only
*** Questions
**** TODO In the example implementation, there is a std::stack and a TClonesArray buffer assigned.
     PopNextTrack pop out the particles from the std::stack, while PopPrimaryForTracking pop out the first several particles
     from the TClonesArray and transformed into simulation recognized tracks. The problem is the primary particles provide by
     user are also pushed to the std::stack, which in principle will be pop out for simulation again.

* Migration to Multi Thread Mode
** Classes to be modified
*** Stack
*** Generators
*** Detector Modules
** Run time environment
*** Number of threads
    #+begin_src shell
    export G4FORCENUMBEROFTHREADS=threadNumber
    #+end_src
